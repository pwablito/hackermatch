version: "3"

x-hackermatch-scaled-service:
  &hackermatch-scaled-service
  deploy:
    mode: replicated
    replicas: 1


x-hackermatch-grpc-service-base:
  &hackermatch-grpc-service-base
  <<: *hackermatch-scaled-service
  depends_on:
    libs:
      condition: service_started
    postgres:
      condition: service_healthy
    migrations:
      condition: service_completed_successfully
  environment:
    - HACKERMATCH_DB=postgresql://hackermatch:hackermatch@postgres/hackermatch
    - HACKERMATCH_SEND_EMAIL=${HACKERMATCH_SEND_EMAIL}
    - HACKERMATCH_SEND_NAME=${HACKERMATCH_SEND_NAME}
    - HACKERMATCH_SEND_PASSWORD=${HACKERMATCH_SEND_PASSWORD}
services:
  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - web_server
      - api_server

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=hackermatch
      - POSTGRES_PASSWORD=hackermatch
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d hackermatch -U hackermatch"]
      interval: 5s
      timeout: 10s
      retries: 5
  migrations:
    image: hackermatch/migrations:latest
    command: "python3 -m alembic -x url=postgresql://hackermatch:hackermatch@postgres/hackermatch upgrade head"
    build:
      dockerfile: migrations.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy

  email_server:
    <<: *hackermatch-grpc-service-base
    image: hackermatch/email_server:latest
    build:
      dockerfile: email.Dockerfile

  submission_server:
    <<: *hackermatch-grpc-service-base
    image: hackermatch/submission_server:latest
    build:
      dockerfile: submission.Dockerfile

  api_server:
    <<: *hackermatch-scaled-service
    image: hackermatch/api:latest
    build:
      dockerfile: api.Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_server.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api_server.entrypoints=web"
      - "traefik.http.services.api_server.loadbalancer.server.port=80"
    environment:
      - HACKERMATCH_EMAIL_SERVER=email_server:80
      - HACKERMATCH_SUBMISSION_SERVER=submission_server:80
    depends_on:
      - email_server
      - submission_server
      - libs

  web_server:
    <<: *hackermatch-scaled-service
    image: hackermatch/web_server:latest
    build:
      context: ./web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web_server.rule=PathPrefix(`/`)"
      - "traefik.http.routers.web_server.entrypoints=web"
      - "traefik.http.services.web_server.loadbalancer.server.port=80"
    depends_on:
      - api_server
  libs:
    image: hackermatch/libs:latest
    build:
      dockerfile: libs.Dockerfile
